Algorithme TD12
Type
  t_contact = Enregistrement
    nom: Chaine[20]
    numero: *Entier
  Fin Enregistrement

  t_repertoire = Tableau [1..100] de t_contact

Var c: t_contact
    repertoire: t_repertoire
    ch: chaine[20]
    i, pos: Entier
    

(** Partie 1 **)

Fonction saisis_numero(): *Entier
  Var numero: *Entier
      i, n: Entier
  Debut
    Ecrire("Donner le nombre de chiffre: ")
    Lire(n)
    numero <- allouer(n*taille(Entier))
    Si (numero = NULL) alors
      Ecrire("Espace memoire insuffisante")
    Sinon
      Pour i de 1 à n faire
        Répéter
          Lire(*(numero+i-1))
        Jusqu'à (*(numero+i-1)>=0 et *(numero+i-1)<=9) 
      Fin Pour
      *(numero+n) <- -1
    Fin Si
    saisis_numero <- numero
  Fin

Procédure affiche_numero(numero: *Entier)
  Var p: *Entier
  Debut
  p <- numero
    Tant que (*(numero) <> -1) Faire
      Ecrire(*p)
      p <- p + 1
    Fin Tant que
  Fin

(** Partie 2 **)

Procédure affiche_contact(contact: t_contact)
  Debut
    Ecrire(contact.nom, ": ")
    affiche_numero(contact.numero)
  Fin

Procédure saisis_contact(contact: *t_contact)
  Debut
    Ecrire("Entrez le nom du contact: ")
    Lire(contact->nom)
    Ecrire("Entrez le numéro de ", contact->nom, ": ")
    contact->numero <- saisis_numero()
  Fin

(** Partie 3 **)

Procédure ajoute_contact(repertoire: t_repertoire, contact: t_contact, n: *Entier)
  Debut
    repertoire[(*n)] <- contact
    (*n) <- (*n) + 1
  Fin

Procédure affiche_repertoire(repertoire: t_repertoire, n: Entier)
  Var i: Entier
  Debut
    Pour i de 1 à n faire
      affiche_contact(repertoire[i])
    Fin Pour
  Fin

Fonction cherche_nom(repertoire: t_repertoire, n: Entier, nom: chaine[]): Entier
  Var k, pos : Entier
  Debut
    K <- 1, pos <- -1
    Tant que ((k<n) et (pos = -1)) Faire
      Si (repertoire[k].nom = nom) Alors
        pos <- k
      Sinon
        k <- k + 1
      Fin Si
    Fin Tant que
    cherche_nom <- pos
  Fin

Procédure supprime_contact(repertoire: t_repertoire, n: *Entier, contact: t_contact)
  Var pos, i: Entier
  Debut
    pos <- cherche_nom(repertoire, (*n), contact.nom)
    Si (pos <> -1) Alors
      Pour i de pos à (*n)-1 faire
        repertoire[i] <- repertoire[i+1]
      Fin Pour
      (*n) = (*n) - 1
    Sinon
      Ecrire("Contact n'existe pas!")
    Fin Si
  Fin

(** Algorithme Principal **)

Début
  n <- 0
  repeter
    Ecrire("~~~~~~~~~~ Menu: ~~~~~~~~~~~~")
    Ecrire("0- Exit")
    Ecrire("1- Ajouter un contact dans le répertoire")
    Ecrire("2- Chercher un contact")
    Ecrire("3- Supprimer un contact")
    Ecrire("4- Afficher la liste des contacts")
    repeter
      Ecrire("Taper votre choix: ")
      Lire(ch)
    Jusqu'à ((ch<=4) et (ch>=0))
    Selon (ch) faire
      0: Ecrire("Au revoir!")

      1: Ecrire("Saisir un contact à ajouter dans le répertoire: ")
         saisis_contact(&c)
         Si (n<100)
           ajoute_contact(repertoire, c, &n)
         Sinon
           Ecrire("Memoire inssufisante!")
         Fin Si

      2: Ecrire("Introduire le nom du contact à chercher: ")
         Lire(ch)
         pos <- cherche_nom(repertoire, n, ch)
         Si (pos <> -1) Alors
           affiche_contact(repertoire[pos])
         Sinon
           Ecrire("Contact n'existe pas")
         Fin Si

       3: Ecrire("Saisir les informations du contact à supprimer: ")
          saisis_contact(&c)
          supprime_contact(repertoire, &n, c)

       4: Ecrire("Affichage de la liste des contacts: ")
          Pour i de 1 à n faire
            affiche_contact(repertoire[i]
          Fin Pour

  Jusqu'à (ch = 0)
Fin